# Add Desktop Instant Replays to your CLI

First, [install Replayable Desktop](https://replayable.zendesk.com/hc/en-us/articles/4421207018011-Download-Replayable-Desktop). Replayable Desktop records a local 1 hour buffer that you can publish to replayable.io.

```sh
npm install replayable -g
```

## Create a github issue with a 30 second instant replay

```sh
gh issue create -w -t "Title" -b "`replayable`"
```

## Create a github pull request with a 30 second instant replay

```sh
gh pr create -w -t "Title" -b "`replayable`"
```

## Append a 30 second replay to a commit

```sh
git commit -am "`replayable`"
```

## Demo

<a href="https://www.loom.com/share/ea9c2831013a4b5eb996bd47f8178f4e">
  <p>Capture bugs with replayable. - Watch Video</p>
  <img style="max-width:300px;" src="https://cdn.loom.com/sessions/thumbnails/ea9c2831013a4b5eb996bd47f8178f4e-with-play.gif">
</a>

# Usage

```sh
npm install replayable -g
replayable
```

## Options

```
--public (boolean) - triggers share
--format=(link|md) - returns a link or markdown
--image=(gif|png) - determines screenshot format (only if --format=md)
```

## Git Hook

It would be possible to string this along in [a git hook](https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks) to publish with every commit.
#!/usr/bin/env node

const lib = require('./lib')
const { program } = require('commander');

let stdin = '';

program.name('replayable')
  .description('Upgrade your bug reports, pulls, and readmes with clips from local development')
  .version('0.0.9');

program.showHelpAfterError();

program.command('create', { isDefault: true })
  .description('Create a replay and output the resulting url or markdown. Will launch desktop app for local editing before publishing.')
  .option('-t, --title <string>', 'Title of the replay. Automatically generated if not supplied.')
  .option('-b, --body [text]', 'Replay markdown body. This may be piped in.')
  .option('-p, --private', 'Do not expose secret share key in response.')
  .option('--link', 'Return a link instead of markdown.')
  .option('--png', 'Return a static png instead of gif. Only applies if -l is not supplied.')
  .action(async function (str, options) {

    try {

      let description = this.opts().body;
      if (stdin) {
        description = stdin;
      }

      let result = await lib.createReplay({
        title: this.opts().title,
        description,
        private: this.opts().private,
        link: this.opts().link,
        png: this.opts().png
      });
      console.log(result);
    } catch (e) {
      console.log('Error: ', e)
    }
    process.exit(0);

  });


if (process.stdin.isTTY) {
  program.parse(process.argv);
}
else {
  process.stdin.on('error', function () { });
  process.stdin.on('readable', function () {

    var chunk = this.read();

    if (chunk !== null) {
      stdin += chunk;
    }
  });
  process.stdin.on('end', function () {
    program.parse(process.argv);
  });
}

if (module.parent) {
  module.exports = lib
}
